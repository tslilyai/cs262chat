''' 
This wraps the autogenerated protobuf code for server-side functions
'''

import service_pb2 as obj
import db

class ProtobufServer(service_pb2.beta_create_ChatApp_server):
    def __init__(self):
        self.db = DBManager()

    def rpc_send_individual_message(self, request, context):
        to_id = self.db.get_user_id(request.to_name)
        from_id = self.db.get_user_id(request.from_name)
        msg = request.msg

        try:
            self.db.insert_message(to_id, from_id, msg)
        except Exception as e:
            return obj.Response(errno=1, msg=e)
        return obj.Response(errno=0, msg="success!\n")
    
    def rpc_send_group_message(self, request, context):
        to_id = self.db.get_group_id(request.to_name)
        from_id = self.db.get_user_id(request.from_name)
        msg = request.msg

        try:
            self.db.insert_message(to_id, from_id, msg)
        except Exception as e:
            return obj.Response(errno=1, msg=e)
        return obj.Response(errno=0, msg="success!\n")

    def rpc_get_messages(User) returns (stream CMessage) {}

    def rpc_create_group(self, request, context):
        groupname = request.g_name
        try:
            self.db.create_group(groupname)
        except Exception as e:
            return obj.Response(errno=1, msg=e)
        return obj.Response(errno=0, msg="success!\n")

    def rpc_create_account(self, request, context):
        username = request.username
        try:
            self.db.create_account(username)
        except Exception as e:
            return obj.Response(errno=1, msg=e)
        return obj.Response(errno=0, msg="success!\n")

    def rpc_remove_account(User) returns (Response) {}
    def rpc_edit_group_name(Group) returns (Response) {}
    def rpc_remove_group_member(Group) returns (Response) {}
    def rpc_add_group_member(Group) returns (Response) {}
    def rpc_list_group_members(Group) returns (stream User) {}
    def rpc_list_groups(Pattern) returns (stream Group) {}
    def rpc_list_accounts(Pattern) returns (stream User) {}

